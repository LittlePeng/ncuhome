//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.1433
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 2.0.50727.1433.
// 
#pragma warning disable 1591

namespace Ncuhome.Blog.Controls.uploadservice {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="UploadSoap", Namespace="http://xml.sz.luohuedu.net/")]
    public partial class Upload : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback UploadFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileWithSmallAndMidOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileWithSmallOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadFileOnlyFullOperationCompleted;
        
        private System.Threading.SendOrPostCallback UploadAllFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback ListFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetFileSizeOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckFileOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDirectoryOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Upload() {
            this.Url = global::Ncuhome.Blog.Controls.Properties.Settings.Default.Ncuhome_Blog_Controls_uploadservice_Upload;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event UploadFileCompletedEventHandler UploadFileCompleted;
        
        /// <remarks/>
        public event UploadFileWithSmallAndMidCompletedEventHandler UploadFileWithSmallAndMidCompleted;
        
        /// <remarks/>
        public event UploadFileWithSmallCompletedEventHandler UploadFileWithSmallCompleted;
        
        /// <remarks/>
        public event UploadFileOnlyFullCompletedEventHandler UploadFileOnlyFullCompleted;
        
        /// <remarks/>
        public event UploadAllFileCompletedEventHandler UploadAllFileCompleted;
        
        /// <remarks/>
        public event DeleteFileCompletedEventHandler DeleteFileCompleted;
        
        /// <remarks/>
        public event ListFileCompletedEventHandler ListFileCompleted;
        
        /// <remarks/>
        public event GetFileSizeCompletedEventHandler GetFileSizeCompleted;
        
        /// <remarks/>
        public event CheckFileCompletedEventHandler CheckFileCompleted;
        
        /// <remarks/>
        public event CheckDirectoryCompletedEventHandler CheckDirectoryCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/UploadFile", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string FileName, string FileDirectory) {
            object[] results = this.Invoke("UploadFile", new object[] {
                        fs,
                        FileName,
                        FileDirectory});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileAsync(byte[] fs, string FileName, string FileDirectory) {
            this.UploadFileAsync(fs, FileName, FileDirectory, null);
        }
        
        /// <remarks/>
        public void UploadFileAsync(byte[] fs, string FileName, string FileDirectory, object userState) {
            if ((this.UploadFileOperationCompleted == null)) {
                this.UploadFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOperationCompleted);
            }
            this.InvokeAsync("UploadFile", new object[] {
                        fs,
                        FileName,
                        FileDirectory}, this.UploadFileOperationCompleted, userState);
        }
        
        private void OnUploadFileOperationCompleted(object arg) {
            if ((this.UploadFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileCompleted(this, new UploadFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/UploadFileWithSmallAndMid", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFileWithSmallAndMid([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string File, string FileDirectory, string FileName, int thumWidth, int thumHeight, int midWidth, int midHeight) {
            object[] results = this.Invoke("UploadFileWithSmallAndMid", new object[] {
                        fs,
                        File,
                        FileDirectory,
                        FileName,
                        thumWidth,
                        thumHeight,
                        midWidth,
                        midHeight});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileWithSmallAndMidAsync(byte[] fs, string File, string FileDirectory, string FileName, int thumWidth, int thumHeight, int midWidth, int midHeight) {
            this.UploadFileWithSmallAndMidAsync(fs, File, FileDirectory, FileName, thumWidth, thumHeight, midWidth, midHeight, null);
        }
        
        /// <remarks/>
        public void UploadFileWithSmallAndMidAsync(byte[] fs, string File, string FileDirectory, string FileName, int thumWidth, int thumHeight, int midWidth, int midHeight, object userState) {
            if ((this.UploadFileWithSmallAndMidOperationCompleted == null)) {
                this.UploadFileWithSmallAndMidOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileWithSmallAndMidOperationCompleted);
            }
            this.InvokeAsync("UploadFileWithSmallAndMid", new object[] {
                        fs,
                        File,
                        FileDirectory,
                        FileName,
                        thumWidth,
                        thumHeight,
                        midWidth,
                        midHeight}, this.UploadFileWithSmallAndMidOperationCompleted, userState);
        }
        
        private void OnUploadFileWithSmallAndMidOperationCompleted(object arg) {
            if ((this.UploadFileWithSmallAndMidCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileWithSmallAndMidCompleted(this, new UploadFileWithSmallAndMidCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/UploadFileWithSmall", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFileWithSmall([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string File, string FileDirectory, string FileName, int width, int height) {
            object[] results = this.Invoke("UploadFileWithSmall", new object[] {
                        fs,
                        File,
                        FileDirectory,
                        FileName,
                        width,
                        height});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileWithSmallAsync(byte[] fs, string File, string FileDirectory, string FileName, int width, int height) {
            this.UploadFileWithSmallAsync(fs, File, FileDirectory, FileName, width, height, null);
        }
        
        /// <remarks/>
        public void UploadFileWithSmallAsync(byte[] fs, string File, string FileDirectory, string FileName, int width, int height, object userState) {
            if ((this.UploadFileWithSmallOperationCompleted == null)) {
                this.UploadFileWithSmallOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileWithSmallOperationCompleted);
            }
            this.InvokeAsync("UploadFileWithSmall", new object[] {
                        fs,
                        File,
                        FileDirectory,
                        FileName,
                        width,
                        height}, this.UploadFileWithSmallOperationCompleted, userState);
        }
        
        private void OnUploadFileWithSmallOperationCompleted(object arg) {
            if ((this.UploadFileWithSmallCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileWithSmallCompleted(this, new UploadFileWithSmallCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/UploadFileOnlyFull", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadFileOnlyFull([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string File, string FileDirectory, string FileName) {
            object[] results = this.Invoke("UploadFileOnlyFull", new object[] {
                        fs,
                        File,
                        FileDirectory,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadFileOnlyFullAsync(byte[] fs, string File, string FileDirectory, string FileName) {
            this.UploadFileOnlyFullAsync(fs, File, FileDirectory, FileName, null);
        }
        
        /// <remarks/>
        public void UploadFileOnlyFullAsync(byte[] fs, string File, string FileDirectory, string FileName, object userState) {
            if ((this.UploadFileOnlyFullOperationCompleted == null)) {
                this.UploadFileOnlyFullOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadFileOnlyFullOperationCompleted);
            }
            this.InvokeAsync("UploadFileOnlyFull", new object[] {
                        fs,
                        File,
                        FileDirectory,
                        FileName}, this.UploadFileOnlyFullOperationCompleted, userState);
        }
        
        private void OnUploadFileOnlyFullOperationCompleted(object arg) {
            if ((this.UploadFileOnlyFullCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadFileOnlyFullCompleted(this, new UploadFileOnlyFullCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/UploadAllFile", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string UploadAllFile([System.Xml.Serialization.XmlElementAttribute(DataType="base64Binary")] byte[] fs, string FileDirectory, string FileName) {
            object[] results = this.Invoke("UploadAllFile", new object[] {
                        fs,
                        FileDirectory,
                        FileName});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void UploadAllFileAsync(byte[] fs, string FileDirectory, string FileName) {
            this.UploadAllFileAsync(fs, FileDirectory, FileName, null);
        }
        
        /// <remarks/>
        public void UploadAllFileAsync(byte[] fs, string FileDirectory, string FileName, object userState) {
            if ((this.UploadAllFileOperationCompleted == null)) {
                this.UploadAllFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUploadAllFileOperationCompleted);
            }
            this.InvokeAsync("UploadAllFile", new object[] {
                        fs,
                        FileDirectory,
                        FileName}, this.UploadAllFileOperationCompleted, userState);
        }
        
        private void OnUploadAllFileOperationCompleted(object arg) {
            if ((this.UploadAllFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UploadAllFileCompleted(this, new UploadAllFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/DeleteFile", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DeleteFile(string FilePath) {
            object[] results = this.Invoke("DeleteFile", new object[] {
                        FilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string FilePath) {
            this.DeleteFileAsync(FilePath, null);
        }
        
        /// <remarks/>
        public void DeleteFileAsync(string FilePath, object userState) {
            if ((this.DeleteFileOperationCompleted == null)) {
                this.DeleteFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteFileOperationCompleted);
            }
            this.InvokeAsync("DeleteFile", new object[] {
                        FilePath}, this.DeleteFileOperationCompleted, userState);
        }
        
        private void OnDeleteFileOperationCompleted(object arg) {
            if ((this.DeleteFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteFileCompleted(this, new DeleteFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/ListFile", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public NcuFileInfo[] ListFile(string FilePath) {
            object[] results = this.Invoke("ListFile", new object[] {
                        FilePath});
            return ((NcuFileInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void ListFileAsync(string FilePath) {
            this.ListFileAsync(FilePath, null);
        }
        
        /// <remarks/>
        public void ListFileAsync(string FilePath, object userState) {
            if ((this.ListFileOperationCompleted == null)) {
                this.ListFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnListFileOperationCompleted);
            }
            this.InvokeAsync("ListFile", new object[] {
                        FilePath}, this.ListFileOperationCompleted, userState);
        }
        
        private void OnListFileOperationCompleted(object arg) {
            if ((this.ListFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ListFileCompleted(this, new ListFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/GetFileSize", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public double GetFileSize(string FilePath) {
            object[] results = this.Invoke("GetFileSize", new object[] {
                        FilePath});
            return ((double)(results[0]));
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string FilePath) {
            this.GetFileSizeAsync(FilePath, null);
        }
        
        /// <remarks/>
        public void GetFileSizeAsync(string FilePath, object userState) {
            if ((this.GetFileSizeOperationCompleted == null)) {
                this.GetFileSizeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetFileSizeOperationCompleted);
            }
            this.InvokeAsync("GetFileSize", new object[] {
                        FilePath}, this.GetFileSizeOperationCompleted, userState);
        }
        
        private void OnGetFileSizeOperationCompleted(object arg) {
            if ((this.GetFileSizeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetFileSizeCompleted(this, new GetFileSizeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/CheckFile", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckFile(string FilePath) {
            object[] results = this.Invoke("CheckFile", new object[] {
                        FilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckFileAsync(string FilePath) {
            this.CheckFileAsync(FilePath, null);
        }
        
        /// <remarks/>
        public void CheckFileAsync(string FilePath, object userState) {
            if ((this.CheckFileOperationCompleted == null)) {
                this.CheckFileOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckFileOperationCompleted);
            }
            this.InvokeAsync("CheckFile", new object[] {
                        FilePath}, this.CheckFileOperationCompleted, userState);
        }
        
        private void OnCheckFileOperationCompleted(object arg) {
            if ((this.CheckFileCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckFileCompleted(this, new CheckFileCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://xml.sz.luohuedu.net/CheckDirectory", RequestNamespace="http://xml.sz.luohuedu.net/", ResponseNamespace="http://xml.sz.luohuedu.net/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckDirectory(string FilePath) {
            object[] results = this.Invoke("CheckDirectory", new object[] {
                        FilePath});
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDirectoryAsync(string FilePath) {
            this.CheckDirectoryAsync(FilePath, null);
        }
        
        /// <remarks/>
        public void CheckDirectoryAsync(string FilePath, object userState) {
            if ((this.CheckDirectoryOperationCompleted == null)) {
                this.CheckDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDirectoryOperationCompleted);
            }
            this.InvokeAsync("CheckDirectory", new object[] {
                        FilePath}, this.CheckDirectoryOperationCompleted, userState);
        }
        
        private void OnCheckDirectoryOperationCompleted(object arg) {
            if ((this.CheckDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDirectoryCompleted(this, new CheckDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Xml", "2.0.50727.1433")]
    [System.SerializableAttribute()]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://xml.sz.luohuedu.net/")]
    public partial class NcuFileInfo {
        
        private string fileFullNameField;
        
        private System.DateTime createTimeField;
        
        /// <remarks/>
        public string FileFullName {
            get {
                return this.fileFullNameField;
            }
            set {
                this.fileFullNameField = value;
            }
        }
        
        /// <remarks/>
        public System.DateTime CreateTime {
            get {
                return this.createTimeField;
            }
            set {
                this.createTimeField = value;
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadFileCompletedEventHandler(object sender, UploadFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadFileWithSmallAndMidCompletedEventHandler(object sender, UploadFileWithSmallAndMidCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileWithSmallAndMidCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileWithSmallAndMidCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadFileWithSmallCompletedEventHandler(object sender, UploadFileWithSmallCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileWithSmallCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileWithSmallCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadFileOnlyFullCompletedEventHandler(object sender, UploadFileOnlyFullCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadFileOnlyFullCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadFileOnlyFullCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void UploadAllFileCompletedEventHandler(object sender, UploadAllFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UploadAllFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UploadAllFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void DeleteFileCompletedEventHandler(object sender, DeleteFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void ListFileCompletedEventHandler(object sender, ListFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ListFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ListFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public NcuFileInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((NcuFileInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void GetFileSizeCompletedEventHandler(object sender, GetFileSizeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetFileSizeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetFileSizeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public double Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((double)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CheckFileCompletedEventHandler(object sender, CheckFileCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    public delegate void CheckDirectoryCompletedEventHandler(object sender, CheckDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "2.0.50727.1433")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591