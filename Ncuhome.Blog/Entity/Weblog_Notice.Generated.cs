
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a CodeSmith Template.
//
//     DO NOT MODIFY contents of this file. Changes to this
//     file will be lost if the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

using System;
using System.ComponentModel;
using System.Data.Linq;
using System.Data.Linq.Mapping;
using System.Diagnostics;

namespace Ncuhome.Blog.Entity
{
    /// <summary>
    /// The class representing the dbo.Weblog_Notice table.
    /// </summary>
    [Table(Name="dbo.Weblog_Notice")]
    public partial class Weblog_Notice
    {
        
        #region Default Constructor
        /// <summary>
        /// Initializes a new instance of the <see cref="Weblog_Notice"/> class.
        /// </summary>
        [DebuggerNonUserCodeAttribute()]
        public Weblog_Notice()
        {
            OnCreated();
        }
        #endregion
        
        #region Column Mapped Properties
        
        private int _ID = default(int);

        /// <summary>
        /// Gets the ID column value.
        /// </summary>
        [Column(Name="ID", Storage="_ID", DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, CanBeNull=false)]
        public int ID
        {
            get { return _ID; }
            set
            {
                if (_ID != value)
                {
                    OnIDChanging(value);
                    _ID = value;
                    OnIDChanged();
                }
            }
        }
        
        private string _Notice_Content;

        /// <summary>
        /// Gets or sets the Notice_Content column value.
        /// </summary>
        [Column(Name="Notice_Content", Storage="_Notice_Content", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
        public string Notice_Content
        {
            get { return _Notice_Content; }
            set
            {
                if (_Notice_Content != value)
                {
                    OnNotice_ContentChanging(value);
                    _Notice_Content = value;
                    OnNotice_ContentChanged();
                }
            }
        }
        
        private System.DateTime _Notice_CreateTime;

        /// <summary>
        /// Gets or sets the Notice_CreateTime column value.
        /// </summary>
        [Column(Name="Notice_CreateTime", Storage="_Notice_CreateTime", DbType="DateTime NOT NULL", CanBeNull=false)]
        public System.DateTime Notice_CreateTime
        {
            get { return _Notice_CreateTime; }
            set
            {
                if (_Notice_CreateTime != value)
                {
                    OnNotice_CreateTimeChanging(value);
                    _Notice_CreateTime = value;
                    OnNotice_CreateTimeChanged();
                }
            }
        }
        
        private Nullable<bool> _Notice_IsTop;

        /// <summary>
        /// Gets or sets the Notice_IsTop column value.
        /// </summary>
        [Column(Name="Notice_IsTop", Storage="_Notice_IsTop", DbType="Bit")]
        public Nullable<bool> Notice_IsTop
        {
            get { return _Notice_IsTop; }
            set
            {
                if (_Notice_IsTop != value)
                {
                    OnNotice_IsTopChanging(value);
                    _Notice_IsTop = value;
                    OnNotice_IsTopChanged();
                }
            }
        }
        
        private Nullable<int> _Notice_Type;

        /// <summary>
        /// Gets or sets the Notice_Type column value.
        /// </summary>
        [Column(Name="Notice_Type", Storage="_Notice_Type", DbType="Int")]
        public Nullable<int> Notice_Type
        {
            get { return _Notice_Type; }
            set
            {
                if (_Notice_Type != value)
                {
                    OnNotice_TypeChanging(value);
                    _Notice_Type = value;
                    OnNotice_TypeChanged();
                }
            }
        }
        #endregion
        
        #region Association Mapped Properties
        #endregion
        
        #region Extensibility Method Definitions
        /// <summary>Called when this instance is loaded.</summary>
        partial void OnLoaded();
        /// <summary>Called when this instance is being saved.</summary>
        partial void OnValidate(ChangeAction action);
        /// <summary>Called when this instance is created.</summary>
        partial void OnCreated();
        /// <summary>Called when ID is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnIDChanging(int value);
        /// <summary>Called after ID has Changed.</summary>
        partial void OnIDChanged();
        /// <summary>Called when Notice_Content is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNotice_ContentChanging(string value);
        /// <summary>Called after Notice_Content has Changed.</summary>
        partial void OnNotice_ContentChanged();
        /// <summary>Called when Notice_CreateTime is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNotice_CreateTimeChanging(System.DateTime value);
        /// <summary>Called after Notice_CreateTime has Changed.</summary>
        partial void OnNotice_CreateTimeChanged();
        /// <summary>Called when Notice_IsTop is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNotice_IsTopChanging(Nullable<bool> value);
        /// <summary>Called after Notice_IsTop has Changed.</summary>
        partial void OnNotice_IsTopChanged();
        /// <summary>Called when Notice_Type is changing.</summary>
        /// <param name="value">The new value.</param>
        partial void OnNotice_TypeChanging(Nullable<int> value);
        /// <summary>Called after Notice_Type has Changed.</summary>
        partial void OnNotice_TypeChanged();
        #endregion
        
    }
}

